{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "Stacktrace",
    "description": "Stacktrace - A simple REST API, that enables registered users to ask and get answers to tech questions."
  },
  "servers": [
    {
      "url": "http://localhost:3000/"
    },
    {
      "url": ""
    }
  ],
  "host": "",
  "basePath": "/api/v1",
  "securityDefinitions": {
    "Bearer": {
      "description": "Standard Authorization header using the bearer scheme. Example: \"bearer {token}\"",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "cookieAuth": {
      "description": "A convenient way to deliver access tokens from client to server by bootstrapping token within a cookie",
      "type": "apiKey",
      "name": "token",
      "in": "cookie"
    }
  },
  "tags": [
    {
      "name": "Auth",
      "description": "Endpoints for Authentication"
    },
    {
      "name": "Question",
      "description": "Endpoints for Questions"
    },
    {
      "name": "Answer",
      "description": "Endpoints for Answers"
    },
    {
      "name": "Search",
      "description": "Endpoints for retrieving questions, answers or users"
    }
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "description": "Registers a User",
        "summary": "Creates a new user on the App",
        "tags": ["Auth"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "This is the request body object containing user information",
            "schema": {
              "$ref": "#/components/schemas/requestBody/signupRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created a new user. Note that a cookie has been set to always deliver your token to the server when ever you try to access a protected route, hence until your token expires, you do not need to manually add your token to successfully access all protected endpoints.",
            "schema": {
              "$ref": "#/components/schemas/responseBody/201"
            }
          },
          "400": {
            "description": "Bad Request, Validation error occurred",
            "schema": {
              "$ref": "#/components/schemas/responseBody/400"
            }
          },
          "409": {
            "description": "Email address already exists",
            "schema": {
              "$ref": "#/components/schemas/responseBody/409"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/components/schemas/responseBody/500"
            }
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "description": "Logs in a user",
        "summary": "Enables a user to login so as to have access to the App's features",
        "tags": ["Auth"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "This is the request body object containing user information",
            "schema": {
              "$ref": "#/components/schemas/requestBody/signinRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully logged in user. Note that a cookie has been set to always deliver your token to the server when ever you try to access a protected route, hence until your token expires, you do not need to manually add your token to successfully access all protected endpoints.",
            "schema": {
              "$ref": "#/components/schemas/responseBody/200"
            }
          },
          "401": {
            "description": "Unautheticated Request / Invalid login credentials",
            "schema": {
              "$ref": "#/components/schemas/responseBody/401"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/components/schemas/responseBody/500"
            }
          }
        }
      }
    },
    "/question": {
      "post": {
        "description": "Enables users to ask a question",
        "summary": "Enables a user to ask a question on the App",
        "tags": ["Question"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "This is the request body object containing user information",
            "schema": {
              "$ref": "#/components/schemas/requestBody/newQuestion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created a new question",
            "schema": {
              "$ref": "#/components/schemas/responseBody/createQuestionSuccess"
            }
          },
          "400": {
            "description": "Bad Request, Validation error occurred",
            "schema": {
              "$ref": "#/components/schemas/responseBody/400"
            }
          },
          "401": {
            "description": "Unautheticated Request / Invalid login credentials",
            "schema": {
              "$ref": "#/components/schemas/responseBody/401"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/components/schemas/responseBody/500"
            }
          }
        }
      },
      "get": {
        "description": "Enables users to view and search for questions by the author's name which could be either fullname or firstname, by keywords or by phrases.",
        "summary": "Enables a user to view questions and to search for questions on the App with the option paginating and setting a limit to the number of questions retrieved",
        "tags": ["Search"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "query",
            "name": "authorName",
            "required": false,
            "description": "The author's firstname or full name"
          },
          {
            "in": "query",
            "name": "text",
            "required": false,
            "description": "A phrase, keyword or text that is close to the question being searched"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "The maximum number of questions to be retrieved"
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "description": "It is the unit used to determine an offset value, as an example; a limit of 2 and a page value of 2 would offset the collection of questions by 2 and return 2 records"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved questions",
            "schema": {
              "$ref": "#/components/schemas/responseBody/retrievedQuestionsSuccess"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/components/schemas/responseBody/500"
            }
          }
        }
      }
    },
    "/question/{id}": {
      "get": {
        "description": "Enables users to view a question",
        "summary": "Enables a user to view a question by its Id",
        "tags": ["Question"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The question Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved questions",
            "schema": {
              "$ref": "#/components/schemas/responseBody/retrievedQuestionSuccess"
            }
          },
          "400": {
            "description": "Invalid question Id",
            "schema": {
              "$ref": "#/components/schemas/responseBody/400"
            }
          },
          "404": {
            "description": "A question with the id doesn't exist",
            "schema": {
              "$ref": "#/components/schemas/responseBody/404"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/components/schemas/responseBody/500"
            }
          }
        }
      }
    },
    "/question/upvote/{id}": {
      "patch": {
        "description": "Enables users to upvote a question",
        "summary": "Enables a user to upvote a question by its Id",
        "tags": ["Question"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The question Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully up-voted a question",
            "schema": {
              "$ref": "#/components/schemas/responseBody/upVoteSuccess"
            }
          },
          "400": {
            "description": "Invalid question Id",
            "schema": {
              "$ref": "#/components/schemas/responseBody/400"
            }
          },
          "401": {
            "description": "Unautheticated Request / Invalid login credentials",
            "schema": {
              "$ref": "#/components/schemas/responseBody/401"
            }
          },
          "404": {
            "description": "A question with the id doesn't exist",
            "schema": {
              "$ref": "#/components/schemas/responseBody/404"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/components/schemas/responseBody/500"
            }
          }
        }
      }
    },
    "/question/downvote/{id}": {
      "patch": {
        "description": "Enables users to downvote a question",
        "summary": "Enables a user to upvote a question by its Id",
        "tags": ["Question"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The question Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved questions",
            "schema": {
              "$ref": "#/components/schemas/responseBody/downVoteSuccess"
            }
          },
          "400": {
            "description": "Invalid question Id",
            "schema": {
              "$ref": "#/components/schemas/responseBody/400"
            }
          },
          "401": {
            "description": "Unautheticated Request / Invalid login credentials",
            "schema": {
              "$ref": "#/components/schemas/responseBody/401"
            }
          },
          "404": {
            "description": "A question with the id doesn't exist",
            "schema": {
              "$ref": "#/components/schemas/responseBody/404"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/components/schemas/responseBody/500"
            }
          }
        }
      }
    },
    "/question/{id}/answer": {
      "post": {
        "description": "Enables users to answer a question",
        "summary": "Enables a user to answer a question",
        "tags": ["Answer"],
        "produces": ["application/json"],
        "security": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The question Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created an answer to a question",
            "schema": {
              "$ref": "#/components/schemas/responseBody/answerSuccess"
            }
          },
          "400": {
            "description": "Invalid question Id",
            "schema": {
              "$ref": "#/components/schemas/responseBody/400"
            }
          },
          "401": {
            "description": "Unautheticated Request / Invalid login credentials",
            "schema": {
              "$ref": "#/components/schemas/responseBody/401"
            }
          },
          "404": {
            "description": "A question with the id doesn't exist",
            "schema": {
              "$ref": "#/components/schemas/responseBody/404"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/components/schemas/responseBody/500"
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "requestBody": {
        "signupRequest": {
          "title": "User Signup Request",
          "type": "object",
          "properties": {
            "firstName": {
              "description": "First name of the user",
              "type": "string"
            },
            "lastName": {
              "description": "Last name of the user",
              "type": "string"
            },
            "email": {
              "description": "Email of the user",
              "type": "string"
            },
            "password": {
              "description": "The Password of the user",
              "type": "string"
            }
          },
          "example": {
            "firstName": "King",
            "lastName": "David",
            "email": "stacktrace@gmail.com",
            "password": "Elija455h"
          },
          "required": ["firstName, lastName, email, password"]
        },
        "signinRequest": {
          "title": "User Signin Request",
          "type": "object",
          "properties": {
            "email": {
              "description": "Email of the user",
              "type": "string"
            },
            "password": {
              "description": "The Password of the user",
              "type": "string"
            }
          },
          "example": {
            "email": "stacktrace@gmail.com",
            "password": "Elija455h"
          },
          "required": ["email, password"]
        },
        "newQuestion": {
          "title": "A request to create a new question",
          "type": "object",
          "properties": {
            "text": {
              "description": "A description of the question",
              "type": "string"
            }
          },
          "example": {
            "text": "Is node.js the best server-side technology yet ?"
          },
          "required": ["text"]
        }
      },
      "responseBody": {
        "createQuestionSuccess": {
          "properties": {
            "status": {
              "description": "successful",
              "type": "string"
            },
            "data": {
              "description": "An object containing properties of the newly created question",
              "type": "object"
            }
          },
          "example": {
            "status": "success",
            "data": {
              "upVote": {
                "total": 0,
                "by": []
              },
              "downVote": {
                "total": 0,
                "by": []
              },
              "answers": [],
              "_id": "5d9f41b1b6735b1f94f93631",
              "text": "How is it going in french?",
              "author": {
                "_id": "5d9f4173b6735b1f94f93630",
                "email": "daylay92@yahoo.com",
                "firstName": "Ayodele",
                "lastName": "King"
              },
              "createdAt": "2019-10-10T14:35:29.438Z",
              "updatedAt": "2019-10-10T14:35:29.438Z"
            }
          }
        },
        "retrievedQuestionsSuccess": {
          "properties": {
            "status": {
              "description": "successful",
              "type": "string"
            },
            "data": {
              "description": "An object containing properties of the newly created question",
              "type": "object"
            }
          },
          "example": {
            "status": "success",
            "data": [
              {
                "upVote": {
                  "total": 0,
                  "by": []
                },
                "downVote": {
                  "total": 0,
                  "by": []
                },
                "answers": [],
                "_id": "5d9f3ef4f6716d167c200355",
                "text": "What is the yoruba way of writing a regular expression ?",
                "author": {
                  "_id": "5d9f3ef4f6716d167c200354",
                  "firstName": "Ayodq",
                  "lastName": "Akinb",
                  "email": "daylayzi@yahoo.com"
                },
                "createdAt": "2019-10-10T14:23:48.784Z",
                "updatedAt": "2019-10-10T14:23:48.784Z"
              },
              {
                "upVote": {
                  "total": 0,
                  "by": []
                },
                "downVote": {
                  "total": 1,
                  "by": [
                    {
                      "_id": "5d9f3ef4f6716d167c200354",
                      "firstName": "Ayodq",
                      "lastName": "Akinb",
                      "email": "daylayzi@yahoo.com"
                    }
                  ]
                },
                "answers": [],
                "_id": "5d9f3ef5f6716d167c200356",
                "text": "What is it like to be a software Engineer?",
                "author": {
                  "_id": "5d9f3ef4f6716d167c200354",
                  "firstName": "Ayodq",
                  "lastName": "Akinb",
                  "email": "daylayzi@yahoo.com"
                },
                "createdAt": "2019-10-10T14:23:49.255Z",
                "updatedAt": "2019-10-10T14:23:58.445Z"
              },
              {
                "upVote": {
                  "total": 1,
                  "by": [
                    {
                      "_id": "5d9f4173b6735b1f94f93630",
                      "email": "daylay92@yahoo.com",
                      "firstName": "Ayodele",
                      "lastName": "King"
                    }
                  ]
                },
                "downVote": {
                  "total": 0,
                  "by": []
                },
                "answers": [
                  {
                    "_id": "5d9f43d2ead99a2704f9287c",
                    "text": "You only live once my brother",
                    "author": {
                      "_id": "5d9f4173b6735b1f94f93630",
                      "email": "daylay92@yahoo.com",
                      "firstName": "Ayodele",
                      "lastName": "King"
                    },
                    "createdAt": "2019-10-10T14:44:34.908Z",
                    "updatedAt": "2019-10-10T14:44:34.908Z"
                  }
                ],
                "_id": "5d9f41b1b6735b1f94f93631",
                "text": "How is it going in french?",
                "author": {
                  "_id": "5d9f4173b6735b1f94f93630",
                  "email": "daylay92@yahoo.com",
                  "firstName": "Ayodele",
                  "lastName": "King"
                },
                "createdAt": "2019-10-10T14:35:29.438Z",
                "updatedAt": "2019-10-10T14:44:35.158Z"
              }
            ]
          }
        },
        "retrievedQuestionSuccess": {
          "properties": {
            "status": {
              "description": "successful",
              "type": "string"
            },
            "data": {
              "description": "An object containing properties of the newly created question",
              "type": "object"
            }
          },
          "example": {
            "status": "success",
            "data": {
              "upVote": {
                "total": 1,
                "by": [
                  {
                    "_id": "5d9f4173b6735b1f94f93630",
                    "email": "daylay92@yahoo.com",
                    "firstName": "Ayodele",
                    "lastName": "King"
                  }
                ]
              },
              "downVote": {
                "total": 0,
                "by": []
              },
              "answers": [
                {
                  "_id": "5d9f43d2ead99a2704f9287c",
                  "text": "You only live once my brother",
                  "author": {
                    "_id": "5d9f4173b6735b1f94f93630",
                    "email": "daylay92@yahoo.com",
                    "firstName": "Ayodele",
                    "lastName": "King"
                  },
                  "createdAt": "2019-10-10T14:44:34.908Z",
                  "updatedAt": "2019-10-10T14:44:34.908Z"
                }
              ],
              "_id": "5d9f41b1b6735b1f94f93631",
              "text": "How is it going in french?",
              "author": {
                "_id": "5d9f4173b6735b1f94f93630",
                "email": "daylay92@yahoo.com",
                "firstName": "Ayodele",
                "lastName": "King"
              },
              "createdAt": "2019-10-10T14:35:29.438Z",
              "updatedAt": "2019-10-10T14:59:08.954Z"
            }
          }
        },
        "upVoteSuccess": {
          "properties": {
            "status": {
              "description": "successfully upvoted a question",
              "type": "string"
            },
            "data": {
              "description": "An object containing properties of the upvoted question",
              "type": "object"
            }
          },
          "example": {
            "status": "success",
            "data": {
              "upVote": {
                "total": 1,
                "by": [
                  {
                    "_id": "5d9f18582b977f0db8bbdbe3",
                    "email": "daylay92@yahoo.com",
                    "firstName": "Ayodele",
                    "lastName": "King"
                  }
                ]
              },
              "downVote": {
                "total": 0,
                "by": []
              },
              "_id": "5d9f175232b0c80a101d1814",
              "text": "What is the yoruba way of writing a regular expression ?",
              "author": {
                "_id": "5d9f175232b0c80a101d1813",
                "firstName": "Ayodq",
                "lastName": "Akinb",
                "email": "daylayzi@yahoo.com"
              },
              "createdAt": "2019-10-10T11:34:42.363Z",
              "updatedAt": "2019-10-10T11:51:12.381Z"
            }
          }
        },
        "downVoteSuccess": {
          "properties": {
            "status": {
              "description": "successfully upvoted a question",
              "type": "string"
            },
            "data": {
              "description": "An object containing properties of the upvoted question",
              "type": "object"
            }
          },
          "example": {
            "status": "success",
            "data": {
              "upVote": {
                "total": 0,
                "by": []
              },
              "downVote": {
                "total": 2,
                "by": [
                  {
                    "_id": "5d9f18582b977f0db8bbdbe3",
                    "email": "dautii@yahoo.com",
                    "firstName": "Ayo",
                    "lastName": "K"
                  },
                  {
                    "_id": "5d9f18582b977f0db8bbdbe3",
                    "email": "daylay92@yahoo.com",
                    "firstName": "Ayodele",
                    "lastName": "King"
                  }
                ]
              },
              "_id": "5d9f175232b0c80a101d1814",
              "text": "What is the yoruba way of writing a regular expression ?",
              "author": {
                "_id": "5d9f175232b0c80a101d1813",
                "firstName": "Ayodq",
                "lastName": "Akinb",
                "email": "daylayzi@yahoo.com"
              },
              "createdAt": "2019-10-10T11:34:42.363Z",
              "updatedAt": "2019-10-10T11:51:12.381Z"
            }
          }
        },
        "200": {
          "properties": {
            "status": {
              "description": "successful",
              "type": "string"
            },
            "data": {
              "description": "An object containing properties of the newly created record",
              "type": "object"
            }
          },
          "example": {
            "status": "success",
            "data": {
              "_id": "74784309eh9843",
              "firstName": "King",
              "lastName": "David",
              "email": "barelegs@gmail.com",
              "token": "8949y4dhiudfhh0doj0340"
            }
          }
        },
        "answerSuccess": {
          "properties": {
            "status": {
              "description": "sucessfully created record",
              "type": "string"
            },
            "data": {
              "description": "An object containing properties of the newly created record",
              "type": "object"
            }
          },
          "example": {
            "status": "success",
            "data": {
              "_id": "5d9f43d2ead99a2704f9287c",
              "text": "\"You only live once my brother\"",
              "author": {
                "_id": "5d9f4173b6735b1f94f93630",
                "email": "daylay92@yahoo.com",
                "firstName": "Ayodele",
                "lastName": "King"
              },
              "question": {
                "upVote": {
                  "total": 1
                },
                "downVote": {
                  "total": 0
                },
                "_id": "5d9f41b1b6735b1f94f93631",
                "text": "How is it going in french?",
                "author": {
                  "_id": "5d9f4173b6735b1f94f93630",
                  "email": "daylay92@yahoo.com",
                  "firstName": "Ayodele",
                  "lastName": "King"
                },
                "createdAt": "2019-10-10T14:35:29.438Z",
                "updatedAt": "2019-10-10T14:44:35.158Z"
              },
              "createdAt": "2019-10-10T14:44:34.908Z",
              "updatedAt": "2019-10-10T14:44:34.908Z"
            }
          }
        },
        "201": {
          "properties": {
            "status": {
              "description": "sucessfully created record",
              "type": "string"
            },
            "data": {
              "description": "An object containing properties of the newly created record",
              "type": "object"
            }
          },
          "example": {
            "status": "success",
            "data": {
              "_id": "74784309eh9843",
              "firstName": "King",
              "lastName": "David",
              "email": "barelegs@gmail.com",
              "token": "8949y4dhiudfhh0doj0340"
            }
          }
        },
        "400": {
          "properties": {
            "status": {
              "description": "Client error, usually just the text: 'fail'",
              "type": "string"
            },
            "error": {
              "description": "An error object",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A descriptive error message",
                  "type": "string"
                }
              }
            }
          },
          "example": {
            "status": "fail",
            "error": {
              "message": "Some validation error occurred"
            }
          }
        },
        "401": {
          "properties": {
            "status": {
              "description": "Authentication error, usually just the text: 'fail'",
              "type": "string"
            },
            "error": {
              "description": "An error object",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A descriptive error message",
                  "type": "string"
                }
              }
            }
          },
          "example": {
            "status": "fail",
            "error": {
              "message": "Token is required"
            }
          }
        },
        "403": {
          "properties": {
            "status": {
              "description": "Authorization error, usually just the text: 'fail'",
              "type": "string"
            },
            "error": {
              "description": "An error object",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A descriptive error message",
                  "type": "string"
                }
              }
            }
          },
          "example": {
            "status": "fail",
            "error": {
              "message": "User is unauthorized"
            }
          }
        },
        "404": {
          "properties": {
            "status": {
              "description": "Record not found, usually just the text: 'fail'",
              "type": "string"
            },
            "error": {
              "description": "An error object",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A descriptive error message",
                  "type": "string"
                }
              }
            }
          },
          "example": {
            "status": "fail",
            "error": {
              "message": "user was not found"
            }
          }
        },
        "409": {
          "properties": {
            "status": {
              "description": "Record already exists, usually just the text: 'fail'",
              "type": "string"
            },
            "error": {
              "description": "An error object",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A descriptive error message",
                  "type": "string"
                }
              }
            }
          },
          "example": {
            "status": "fail",
            "error": {
              "message": "A user with your email already exists"
            }
          }
        },
        "500": {
          "properties": {
            "status": {
              "description": "Server error, usually just the text: 'fail'",
              "type": "string"
            },
            "error": {
              "description": "An error object",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A descriptive error message",
                  "type": "string"
                }
              }
            }
          },
          "example": {
            "status": "fail",
            "error": {
              "message": "Some error occurred, try again"
            }
          }
        }
      }
    }
  }
}
